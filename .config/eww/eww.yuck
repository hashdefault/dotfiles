(defwidget calendar_full [] 
     (box :orientation "v" :halign "center" :space-evenly "false" 
        (box :class "calendar_title" "     ${day}, ${number_day} ${month_full} ${year_full}")
        (box :class "calendar" 
           (calendar :show-details "true")
)))
(defwidget sidemenu [] 
  (box :space-evenly "false" :class "box-sidemenu" :orientation "v" 
    (box :space-evenly "false" :orientation "v" 
       (label  :class "greeter"  :wrap true :text "${greeter}" )
       (label  :class "greeter-user"  :wrap true :text "${username}" ))
    (box :class "box-profile" :orientation "h"  :space-evenly "false"
        (image :halign "end" :valign "center"  :class "profile-img" :path "/home/lucas/.local/share/images/avatar.png"  :image-width 100)
        (label :halign "end" :valign "center"  :class "profile-label-time"  :text "${hour}:${min}")
        (box :space-evenly false  :valign "center" :halign "start" :class  "profile-desc" :orientation "v"  
          (label :halign "start"  :class "profile-label-day"  :text "${month_full} ${number_day}")
          (label :halign "start" :class "profile-label-day"  :text "${day}")
        ))
    (box :space-evenly "false" :orientation "h" 
       (label :class "quote"  :wrap true :text text_quote )
    )
      (box :space-evenly "false" :class "notifications-menu-side" :orientation "v"  
        (box :class "notifications-menu-header" :orientation "h" :valign "center" 
          (label :halign "start" :text "Notifications" :class "notification-title")
          (eventbox  :halign "end" :class "clear-history-button-event" :cursor "pointer"
            (button :tooltip "Clear all history" :class "clear-history-button" :onclick "dunstctl history-clear" "󰩺")
          )
        )
        (scroll :vscroll true :class "notification-scroll"
            (literal  :content notification )
        )
    )
    (box :halign "center"  :valign "center" :orientation "h" :class "buttons-space"
      (box :valign "center" :halign "center" :space-evenly "false" :orientation "v" :class "button-item" 
        (box :space-evenly "false" :class  "box-nightlight-buttons" :orientation "h" 
          (button  :class {nightlight_active ?  "button-nightlight active":"button-nightlight"} :onclick "~/.config/eww/scripts/nightlight --toggle" {nightlight_active ? "󰛨" : "󰹏" })
          (label :class "seperator"  :text "|")
          (button :class {nightlight_active ?  "button-nightlight-arrow active":"button-nightlight-arrow"} :onclick "~/.config/eww/scripts/nightlight --toggle" ""  ))
        (box :class "box-label"  :orientation "v" 
          (label :class "nightlight-label"  :text "Night Light")
          (scale 
            :orientation "h"
            :class {nightlight_active ?  "night-light":"night-light disabled"}
            :min 0
            :max 100
            :value 10
            :timeout "2000ms"
            :onchange "~/.config/eww/scripts/nightlight {}")))
      (box :space-evenly "false" :orientation "v" 
          (box :space-evenly "false" :class  "box-wifi-buttons" :orientation "h"  :valign "center" :halign "center"
            (button  :class {wifi_active ?  "button-wifi active":"button-wifi"} :onclick "~/.local/bin/wifi --toggle" {wifi_active ? "󰖩" : "󰖪" })
            (label :class "seperator"  :text "|")
            (button :class {wifi_active ?  "button-wifi-arrow active":"button-wifi-arrow"} :onclick "~/.local/bin/wifi --toggle" ""  ))
          (box :class "box-label"  :orientation "h" 
            (label :class "wifi-label" :text "Wifi" )))
      (box :space-evenly "false" :orientation "v"  
        (box :space-evenly "false" :class  "box-bluetooth-buttons" :orientation "h"  :valign "center" :halign "center"
          (button  :class {bluetooth_active ?  "button-bluetooth active" : "button-bluetooth"} :onclick "~/.config/eww/scripts/bluetooth" {bluetooth_active ? "󰂯" : "󰂲" })
          (label :class "seperator"  :text "|")
          (button :class {bluetooth_active ?  "button-bluetooth-arrow active":"button-bluetooth-arrow"} :onclick "~/.config/eww/scripts/bluetooth" ""  ))
        (box :class "box-label"  :orientation "h" 
          (label :class "bluetooth-label" :text "Bluetooth")))
      (box :space-evenly "false" :orientation "v" 
        (box :space-evenly "false" :class  "box-not_disturb-buttons" :orientation "h" :valign "center" :halign "center"
          (button  :class {not_disturb_active ?  "button-not_disturb active" : "button-not_disturb"} :onclick "~/.config/eww/scripts/do_not_disturb.sh" {not_disturb_active ? "󰂛" : "󰂚" })
          (label :class "seperator"  :text "|")
          (button :class {not_disturb_active ?  "button-not_disturb-arrow active":"button-not_disturb-arrow"} :onclick "~/.config/eww/scripts/do_not_disturb.sh" ""  ))
        (box :class "box-label"  :orientation "h" 
          (label :class "not_disturb-label" :text "Not Disturb")))
      )

  (box :class "power-menu-side" :orientation "h"  :halign "center" :valign "center"
        (eventbox :tooltip "Shutdown" :class "hover-power-side-btn" :timeout "20ms" :cursor "pointer" 
          (button :class "power-side-button" :onclick "shutdown 0 1" "⏻"  ))
        (eventbox :tooltip "Reboot" :class "hover-power-side-btn" :timeout "20ms" :cursor "pointer" 
          (button :class "reboot-side-button" :onclick "reboot" ""))
        (eventbox :tooltip "Logout" :class "hover-power-side-btn" :timeout "20ms" :cursor "pointer" 
          (button :class "logout-side-button" :onclick "hyprctl dispatch exit" ""))
        (eventbox :tooltip "Suspend" :class "hover-power-side-btn" :timeout "20ms" :cursor "pointer" 
          (button :class "suspend-button-side" :onclick "systemctl suspend" "󰤄"))
    )))
(defwidget powermenu [] 
    (box :orientation "v" :space-evenly "false" 
        (eventbox :class "hover-power-btn" :timeout "20ms" :cursor "pointer" 
          (button :class "power-button" :onclick "shutdown 0 1" "⏻ "  )
        )
        (label :class "power-description" :text "Shutdown" :justify "center")
        (eventbox :class "hover-power-btn" :timeout "20ms" :cursor "pointer" 
        (button :class "reboot-button" :onclick "reboot" " ")
        )
        (label :class "reboot-description" :text "Reboot" :justify "center")
        (eventbox :class "hover-power-btn" :timeout "20ms" :cursor "pointer" 
        (button :class "logout-button" :onclick "hyprctl dispatch exit" " ")
        )
        (label :class "logout-description" :text "Logout" :justify "center")
        (eventbox :class "hover-power-btn" :timeout "20ms" :cursor "pointer" 
        (button :class "suspend-button" :onclick "systemctl suspend" "󰤄 ")
        )
        (label :class "suspend-description" :text "Suspend" :justify "center")))
(defwidget weather [] 
  (box :orientation "v" :space-evenly "false" 
    (box :orientation "h" :space-evenly "false" 
      (image :class "weather-icon" :path {weather-icon} :image-width 120 )
      (box :class "weather-desc" {weather-desc})
      (box :class "temperature" "${temperature}  "))
    (box :orientation "h" :space-evenly "false" 
      (box :orientation "v" :space-evenly "false" 
        (box :class "weather-week-1" {weather-week-1})
        (image :class "weather-icon-1" :path {weather-icon-1} :image-width 70)
        (box :class "weather-temp-1"  {weather-temp-1})
        (box :class "weather-prec-1"  {weather-prec-1})
        (box :class "weather-desc-1"  {weather-desc-1})
      )
      (box :orientation "v" :space-evenly "false" 
        (box :class "weather-week-2" {weather-week-2})
        (image :class "weather-icon-2" :path {weather-icon-2} :image-width 70)
        (box :class "weather-temp-2" {weather-temp-2})
        (box :class "weather-prec-2" {weather-prec-2})
        (box :class "weather-desc-2" {weather-desc-2})
      )
      (box :orientation "v" :space-evenly "false" 
        (box :class "weather-week-3" {weather-week-3})
        (image :class "weather-icon-3" :path {weather-icon-3} :image-width 70)
        (box :class "weather-temp-3" {weather-temp-3})
        (box :class "weather-prec-3" {weather-prec-3})
        (box :class "weather-desc-3" {weather-desc-3})
      )
      (box :orientation "v" :space-evenly "false" 
        (box :class "weather-week-4" {weather-week-4})
        (image :class "weather-icon-4" :path {weather-icon-4} :image-width 70)
        (box :class "weather-temp-4" {weather-temp-4})
        (box :class "weather-prec-4" {weather-prec-4})
        (box :class "weather-desc-4" {weather-desc-4})
      )
      (box :orientation "v" :space-evenly "false" 
        (box :class "weather-week-5" {weather-week-5})
        (image :class "weather-icon-5" :path {weather-icon-5} :image-width 70)
        (box :class "weather-temp-5" {weather-temp-5})
        (box :class "weather-prec-5" {weather-prec-5})
        (box :class "weather-desc-5" {weather-desc-5})
      ))))

    
    ;; Profile vars
    (defpoll greeter  :interval "1000s" "~/.config/eww/scripts/greeter"  )
    (defpoll icon_greeter  :interval "1000s" "" )
    (defpoll username :interval "10s" "whoami")
    (defpoll host :interval "10s" "hostname")
    (defpoll text_quote  :interval "1800s" "~/.config/eww/scripts/getquote")

    ;; Notification vars
    (defpoll  notification  :interval "300ms" "~/.config/eww/scripts/notify_history")
    
    ;; Buttons vars
    (defpoll nightlight_active :interval "20ms" "[ $(pidof hyprsunset) ] && echo true || echo false")
    (defpoll bluetooth_active :interval "20ms" "~/.config/eww/scripts/getbluetooth" )
    (defpoll wifi_active :interval "20ms" "[ $(pidof wifi ) ] && echo true || echo false")
    (defpoll not_disturb_active :interval "20ms" "dunstctl is-paused")

    ;; Date vars
    (defpoll number_day :interval "5h"  "date \"+%d\"")
    (defpoll month :interval "10h"  "date \"+%b\"")
    (defpoll min :interval "10s"  "date \"+%M\"")
    (defpoll hour :interval "10s"  "date \"+%H\"")
    (defpoll day :interval "15h"  "~/.config/eww/scripts/getday")
    (defpoll month_full :interval "15h"  "date \"+%B\"")
    (defpoll year_full :interval "15h"  "date \"+%Y\"")

    ;; Weather vars
    (defpoll weather-icon :interval "20m"  "echo /tmp/getweathertodayicon")
    (defpoll temperature :interval "20m"  "cat /tmp/getweathertodaytemp")
    (defpoll weather-hex :interval "20m"  "cat /tmp/getweathertodayhex")
    (defpoll weather-desc :interval "20m"  "cat /tmp/getweathertodaydesc")

    (defpoll weather-icon-1 :interval "20m"  "echo /tmp/forecast_1day_icon")
    (defpoll weather-icon-2 :interval "20m"  "echo /tmp/forecast_2day_icon")
    (defpoll weather-icon-3 :interval "20m"  "echo /tmp/forecast_3day_icon")
    (defpoll weather-icon-4 :interval "20m"  "echo /tmp/forecast_4day_icon")
    (defpoll weather-icon-5 :interval "20m"  "echo /tmp/forecast_5day_icon")
 
    (defpoll weather-temp-1 :interval "20m"  "cat /tmp/forecast_1day_temp")
    (defpoll weather-temp-2 :interval "20m"  "cat /tmp/forecast_2day_temp")
    (defpoll weather-temp-3 :interval "20m"  "cat /tmp/forecast_3day_temp")
    (defpoll weather-temp-4 :interval "20m"  "cat /tmp/forecast_4day_temp")
    (defpoll weather-temp-5 :interval "20m"  "cat /tmp/forecast_5day_temp")

    (defpoll weather-prec-1 :interval "20m"  "cat /tmp/forecast_1day_prec")
    (defpoll weather-prec-2 :interval "20m"  "cat /tmp/forecast_2day_prec")
    (defpoll weather-prec-3 :interval "20m"  "cat /tmp/forecast_3day_prec")
    (defpoll weather-prec-4 :interval "20m"  "cat /tmp/forecast_4day_prec")
    (defpoll weather-prec-5 :interval "20m"  "cat /tmp/forecast_5day_prec")

    (defpoll weather-desc-1 :interval "20m"  "cat /tmp/forecast_1day_desc")
    (defpoll weather-desc-2 :interval "20m"  "cat /tmp/forecast_2day_desc")
    (defpoll weather-desc-3 :interval "20m"  "cat /tmp/forecast_3day_desc")
    (defpoll weather-desc-4 :interval "20m"  "cat /tmp/forecast_4day_desc")
    (defpoll weather-desc-5 :interval "20m"  "cat /tmp/forecast_5day_desc")

    (defpoll weather-week-1 :interval "20m"  "cat /tmp/getweatherweekday1")
    (defpoll weather-week-2 :interval "20m"  "cat /tmp/getweatherweekday2")
    (defpoll weather-week-3 :interval "20m"  "cat /tmp/getweatherweekday3")
    (defpoll weather-week-4 :interval "20m"  "cat /tmp/getweatherweekday4")
    (defpoll weather-week-5 :interval "20m"  "cat /tmp/getweatherweekday5")

    ;; Main Stuff
    (defwindow calendar_full 
		     :geometry (geometry :x "10px"
                             :width "280px" 
                             :height "100px"
                             :anchor "top right"
                             )
            (calendar_full))
    (defwindow weather 
			    :geometry (geometry  :x "150px" 
                               :width "600px"
                               :height "300px"
                               :anchor "top right"
                               )
			     				(weather))
    (defwindow powermenu 
			    :geometry (geometry  :x "10px" 
                               :width "80px"
                               :height "400px"
                               :anchor "top right"
                               )
			     				(powermenu))
    (defwindow sidemenu
			    :geometry (geometry  :x "10px" 
                               :width "250px"
                               :height "250px"
                               :anchor "top left"
                               )
			     				(sidemenu))
